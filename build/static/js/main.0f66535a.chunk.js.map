{"version":3,"sources":["chat.d.ts","TextInput.tsx","Login.tsx","TextInputAndButton.tsx","ConversationCard.tsx","LeftPane.tsx","MessageCard.tsx","RightPane.tsx","Main.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["proxy","ws","inbox","WebSocket","addEventListener","e","console","log","p","JSON","parse","data","type","alert","message","dispatch","cid","channelId","conversations","find","x","lastMessages","push","conversation","listener","obj","packet","this","send","stringify","listeners","splice","findIndex","args","filter","call","Error","TextInput","state","value","props","focus","attrs","autofocus","autoFocus","onEnter","onKeyDown","keyCode","className","onChange","setState","target","onBlur","onFocus","placeholder","Component","Login","email","password","displayName","register","src","width","setNeptunkod","onClick","href","preventDefault","sendPacket","staySignedIn","TextInputAndButton","textInput","React","createRef","current","ref","buttonContent","ConversationCard","lastMessage","length","selected","onSelect","name","Date","timeStamp","toLocaleTimeString","content","LeftPane","user","tag","text","sendContactRequest","map","key","selectedConversation","firstMessage","c","forceUpdate","removeAllEventListener","MessageCard","own","toDateString","PureComponent","RightPane","m","referenceTo","contentType","onBack","id","senderId","onSend","Main","undefined","App","showLogin","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","fetch","headers","response","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.0f66535a.chunk.js","sourcesContent":["export interface MessageDto {\r\n    id: number;\r\n    timeStamp: string;\r\n    referenceTo: number; // 0: normal message, +: update, -: delete\r\n    senderId: string;\r\n    contentType: number;\r\n    content: string;\r\n}\r\n\r\n\r\nexport interface UserDto {\r\n    id: string;\r\n    displayName: string;\r\n    tag: string;\r\n    lastSeen: string;\r\n}\r\n\r\nexport interface ConversationDto {\r\n    channelId: string;\r\n    parentChannelId: string;\r\n    name: string;\r\n    description: string;\r\n    data: string;\r\n    state: number; // disconnected, outgoingRequest, incomingRequest, accepted, group\r\n    access: number; // none, read, write, admin\r\n    notificationLevel: number; // none, gray, push\r\n    unreadCount: number;\r\n    memberIds: string[];\r\n    lastMessages: MessageDto[];\r\n}\r\n\r\nexport interface InboxDto {\r\n    user: UserDto;\r\n    contacts: UserDto[];\r\n    conversations: ConversationDto[];\r\n}\r\n\r\nexport type OutgoingPacket =\r\n    { type: \"login\", email: string, password: string, staySignedIn: boolean } |\r\n    { type: \"loginWithToken\", token: string } |\r\n    { type: \"register\", email: string, password: string, displayName: string, staySignedIn: boolean } |\r\n    { type: \"contactRequest\", email: string, firstMessage: string } |\r\n    { type: \"message\", channelId: string, referenceTo: number, contentType: number, content: string };\r\n\r\nexport type IncomingPacket =\r\n    { type: \"error\", message: string } |\r\n    { type: \"login\", query: string, token: string, inbox: InboxDto } |\r\n    { type: \"message\", channelId: string, message: MessageDto } |\r\n    { type: \"conversationAdded\", conversation: ConversationDto } |\r\n    { type: \"conversationRemoved\", channelId: string } |\r\n    { type: \"user\", user: UserDto };\r\n\r\nexport class EventProducer {\r\n    private listeners: { type: string, listener, obj?: Object }[] = [];\r\n    addEventListener<K extends keyof M>(type: K, listener: M[K], obj?: Object) {\r\n        this.listeners.push({ type, listener, obj });\r\n    }\r\n    removeEventListener(type: string, listener) {\r\n        this.listeners.splice(this.listeners.findIndex(x => x.type === type && x.listener === listener), 1);\r\n    }\r\n    protected dispatch(type: string, ...args) {\r\n        for (let listener of this.listeners.filter(x => x.type === type))\r\n            listener.listener.call(listener.obj, ...args);\r\n    }\r\n    removeAllEventListener(obj: Object) {\r\n        if (!obj)\r\n            throw new Error(\"Must specify object\");\r\n        this.listeners = this.listeners.filter(x => x.obj !== obj);\r\n    }\r\n}\r\n\r\ninterface ProxyEventMap {\r\n    \"login\": () => void;\r\n    \"message\": (channelId: string, message: MessageDto) => void;\r\n    \"conversation\": (channelId: string) => void;\r\n}\r\n\r\nclass Proxy extends EventProducer<ProxyEventMap> {\r\n    private ws: WebSocket;\r\n    inbox: InboxDto | null = null;\r\n\r\n    constructor() {\r\n        super();\r\n        this.ws = new WebSocket(\"wss://raja.aut.bme.hu/chat/\");\r\n      /*  this.ws.addEventListener(\"open\", () => {\r\n            this.sendPacket( { type: \"register\", email: \"blsnsvbnngbn\", password: \"fdavfnslkjljrgfsfg\" , displayName: \"sasdgfbhdfjhkd\", staySignedIn: true } );\r\n        }); */\r\n        this.ws.addEventListener(\"message\", e => {\r\n            console.log(\"mukodik?\");\r\n            let p = <IncomingPacket>JSON.parse(e.data);\r\n            switch (p.type) {\r\n                case \"error\":\r\n                    alert(p.message);\r\n                    break;\r\n                case \"login\":\r\n                    this.inbox = p.inbox;\r\n                    this.dispatch(\"login\");\r\n                    break;\r\n                case \"message\":\r\n                    let cid = p.channelId;\r\n                    this.inbox!.conversations.find(x => x.channelId === cid)?.lastMessages.push(p.message);\r\n                    this.dispatch(\"message\", cid, p.message);\r\n                \r\n                    break;\r\n                case \"conversationAdded\":\r\n                    this.inbox!.conversations.push(p.conversation);\r\n                    this.dispatch(\"conversation\", p.conversation.channelId);\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n\r\n    \r\n    public addEventListener<K extends keyof M>(type: K, listener: M[K], obj?: Object) {\r\n        super.addEventListener(type,listener,obj);\r\n    }\r\n\r\n    public removeAllEventListener(obj: Object) {\r\n        super.removeAllEventListener(obj);\r\n    }\r\n\r\n    public sendPacket(packet: OutgoingPacket) {\r\n        this.ws.send(JSON.stringify(packet));\r\n    }\r\n}\r\nexport var proxy = new Proxy();\r\n","import { Component } from \"react\";\r\nimport './TextInput.css'\r\nimport React from \"react\";\r\n\r\n\r\nexport interface TextInputOptions {\r\n    value?: string;\r\n    onChange?: (value: string) => void;\r\n    type?: \"text\" | \"password\" | \"email\";\r\n    placeholder?: string;\r\n    onEnter?: () => void;\r\n    autofocus?: boolean;\r\n};\r\n\r\nexport class TextInput extends Component<TextInputOptions>{\r\n    state = { value: this.props.value, focus: false };\r\n    render() {\r\n        let attrs = {} as any;\r\n        if (this.props.autofocus)\r\n            attrs.autoFocus = true;\r\n        if (this.props.onEnter)\r\n            attrs.onKeyDown = e => {\r\n                if (e.keyCode === 13)\r\n                    this.props.onEnter!();\r\n            };\r\n        return (\r\n            <div className=\"text-input\">\r\n                <input type={this.props.type ?? \"text\"} value={this.state.value}\r\n                    onChange={e => {\r\n                        this.setState({ value: e.target.value });\r\n                        this.props.onChange?.(e.target.value);\r\n                    }}\r\n                    onBlur={() => this.setState({ focus: false })}\r\n                    onFocus={() => this.setState({ focus: true })}\r\n                    { ...attrs } />\r\n                <div className=\"focus-indicator\"></div>\r\n                <label className={this.state.value || this.state.focus ? \"subsided\" : \"\"}>\r\n                    {this.props.placeholder}\r\n                </label>\r\n            </div>);\r\n\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { proxy } from './chat.d';\r\nimport { TextInput } from './TextInput';\r\nexport class Login extends Component {\r\n    state = { email: \"\", password: \"\", displayName: \"\", register: false };\r\n    render() {\r\n\r\n        return (\r\n            <div className=\"login\">\r\n                <img src=\"logo512.png\" width=\"256\" />\r\n                <TextInput type=\"email\" placeholder=\"Email (someone@example.com)\" value={this.state.email} onChange={e => this.setNeptunkod(e)} onEnter={() => this.onClick()} autofocus={true} />\r\n                <TextInput type=\"password\" placeholder=\"Password\" value={this.state.password} onChange={e => this.setState({ password: e })} onEnter={() => this.onClick()} autofocus={true} />\r\n                <button type=\"button\" onClick={() => this.onClick()}>\r\n                    {this.state.register ? \"Register\" : \"Login\"}\r\n                </button>\r\n\r\n                {this.state.register &&\r\n                    <TextInput type=\"text\" placeholder=\"Display Name (Agent Smith)\" value={this.state.displayName}\r\n                        onChange={e => this.setState({ displayName: e })} onEnter={() => this.onClick()} autofocus={true} />}\r\n\r\n                <p>{this.state.register ? \"Switch back to \" : \"Have no account yet? Go and \"}\r\n                    <a href=\"\" onClick={e => { e.preventDefault(); this.setState({ register: !this.state.register }); }}>\r\n                        {this.state.register ? \"Login\" : \"Register\"}\r\n                    </a>\r\n                </p>\r\n\r\n\r\n                <a href=\"https://www.google.hu/search?q=privacy\">Privacy Policy</a>\r\n            </div>);\r\n    }\r\n\r\n    setNeptunkod(e: string) {\r\n        if (this.state.register === false) {\r\n            if (e === \"B45NIK\") {\r\n                this.setState({ email: e, displayName: \"Viki\" });\r\n            }\r\n        }\r\n        this.setState({ email: e });\r\n    }\r\n\r\n    onClick() {\r\n        if (this.state.register)\r\n            proxy.sendPacket({\r\n                type: \"register\", email: this.state.email, password: this.state.password,\r\n                displayName: this.state.displayName, staySignedIn: false\r\n            });\r\n        else\r\n            proxy.sendPacket({\r\n                type: \"login\", email: this.state.email, password: this.state.password,\r\n                staySignedIn: false\r\n            });\r\n\r\n    }\r\n}\r\n","import { TextInputOptions, TextInput } from \"./TextInput\";\r\nimport React, { Component } from \"react\";\r\n\r\nexport interface TextInputAndButtonOptions extends TextInputOptions {\r\n    buttonContent?: string;\r\n    onClick?: (text: string) => boolean | void;\r\n}\r\n\r\nexport class TextInputAndButton extends Component<TextInputAndButtonOptions>\r\n{\r\n    textInput = React.createRef<TextInput>();\r\n\r\n    onClick() {\r\n        if (this.props.onClick?.(this.textInput.current?.state.value ?? \"\"))\r\n            this.textInput.current?.setState({ value: \"\" });\r\n\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"text-input-and-button\">\r\n                <TextInput {...this.props} ref={this.textInput} onEnter={() => this.onClick()} />\r\n\r\n                <button type=\"button\" onClick={() => this.onClick()}>\r\n                    {this.props.buttonContent}\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import { Component } from \"react\";\r\nimport { ConversationDto } from \"./chat\";\r\nimport React from \"react\";\r\n\r\nexport class ConversationCard extends Component<{\r\n    conversation: ConversationDto,\r\n    selected: boolean,\r\n    onSelect: () => void\r\n}>\r\n{\r\n    render() {\r\n        let lastMessage = this.props.conversation.lastMessages.length > 0 ?\r\n            this.props.conversation.lastMessages[this.props.conversation.lastMessages.length - 1] : null;\r\n        return (\r\n            <div className={\"conversation-card\" + (this.props.selected ? \" selected\" : \"\")}\r\n                onClick={() => this.props.onSelect()}>\r\n                <div className=\"row\">\r\n                    <span className=\"channel-name\">{this.props.conversation.name}</span>\r\n                    <span className=\"time\">\r\n                        {lastMessage && new Date(lastMessage.timeStamp).toLocaleTimeString()}\r\n                    </span>\r\n                </div>\r\n                <span className=\"last-message\">{lastMessage?.content}</span>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { TextInputAndButton } from \"./TextInputAndButton\";\r\nimport { ConversationDto, InboxDto, proxy } from \"./chat.d\";\r\nimport { ConversationCard } from \"./ConversationCard\";\r\n\r\nexport class LeftPane extends Component<{\r\n    inbox: InboxDto, selectedConversation: ConversationDto | undefined,\r\n    onSelect: (c: ConversationDto) => void\r\n}>\r\n{\r\n    render() {\r\n        return (\r\n            <div className=\"left-pane\">\r\n                <p className=\"my-tag\">My tag: {this.props.inbox.user.tag}</p>\r\n                <TextInputAndButton type=\"text\" placeholder=\"Add user by Tag (Name#123)\"\r\n                    buttonContent=\"Inv\"\r\n                    onClick={text => this.sendContactRequest(text)} />\r\n                <div className=\"conversations\">\r\n                    {this.props.inbox.conversations.map(x =>\r\n                        <ConversationCard\r\n                            key={x.channelId}\r\n                            conversation={x}\r\n                            selected={x === this.props.selectedConversation}\r\n                            onSelect={() => this.props.onSelect(x)} />)}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n    sendContactRequest(email: string) {\r\n        proxy.sendPacket({ type: \"contactRequest\", email, firstMessage: \"Hello\" });\r\n        return true;\r\n    }\r\n    componentDidMount() {\r\n        proxy.addEventListener(\"conversation\", c => this.forceUpdate(), this);\r\n    }\r\n    componentWillUnmount() {\r\n        proxy.removeAllEventListener(this);\r\n    }\r\n\r\n\r\n}","import { PureComponent } from \"react\";\r\nimport { MessageDto } from \"./chat.d\";\r\nimport React from \"react\";\r\n\r\nexport class MessageCard extends PureComponent<{ message: MessageDto, own: boolean }>\r\n{\r\n    render() {\r\n        return (\r\n            <div className={\"message-card\" + (this.props.own ? \" own\" : \"\")}>\r\n                <div className=\"bubble\">\r\n                    <span className=\"text\">{this.props.message.content}</span>\r\n                    <span className=\"time\">\r\n                        {new Date(this.props.message.timeStamp).toDateString()}\r\n                    </span>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component, Fragment } from 'react';\r\nimport { MessageCard } from './MessageCard';\r\nimport { ConversationDto, proxy } from './chat.d';\r\nimport { TextInputAndButton } from './TextInputAndButton';\r\n\r\nexport class RightPane extends Component<{ conversation?: ConversationDto, onBack: () => void }>\r\n{\r\n    componentDidMount() {\r\n        proxy.addEventListener(\"message\", (cid, m) => {\r\n            if (cid === this.props.conversation?.channelId)\r\n                this.forceUpdate();\r\n        }, this);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        proxy.removeAllEventListener(this);\r\n    }\r\n\r\n    onSend(text: string) {\r\n        proxy.sendPacket({ type: \"message\", channelId: this.props.conversation!.channelId, referenceTo: 0, contentType: 0, content: \"B: \" + text });\r\n        return true;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"right-pane column\">\r\n                {this.props.conversation &&\r\n                    <>\r\n                        <div className=\"conversation-header row\">\r\n                            <button type=\"button\" className=\"only-narrow\" onClick={() => this.props.onBack()}>Back</button>\r\n                            <p>{this.props.conversation?.name}</p>\r\n                        </div>\r\n                        <div className=\"messages\">\r\n                            {this.props.conversation?.lastMessages.map(x =>\r\n                                <MessageCard key={x.id} message={x} own={x.senderId === proxy.inbox?.user.id} />)}\r\n                        </div>\r\n                        <div className=\"send-message row\">\r\n                            <TextInputAndButton type=\"text\" placeholder=\"Type something awesome here...\" buttonContent=\"Send\" onClick={x => this.onSend(x)} />\r\n                        </div>\r\n                    </>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { LeftPane } from './LeftPane';\r\nimport { RightPane } from './RightPane';\r\nimport { ConversationDto, proxy } from './chat.d';\r\n\r\nexport class Main extends Component\r\n{\r\n    state = { selectedConversation: undefined as ( ConversationDto | undefined ) };\r\n\r\n    render()\r\n    {\r\n        let className = \"main row \" + ( this.state.selectedConversation ? \"right\" : \"left\" );\r\n        return (\r\n            <div className={ className }>\r\n                <LeftPane\r\n                    inbox={ proxy.inbox! }\r\n                    selectedConversation={ this.state.selectedConversation }\r\n                    onSelect={ c => this.setState( { selectedConversation: c } ) } />\r\n                <RightPane conversation={ this.state.selectedConversation }\r\n                    onBack={ () => this.setState( { selectedConversation: undefined } ) } />\r\n            </div>\r\n        );\r\n    }\r\n\r\n}","import React, { Component } from 'react';\nimport { Login } from './Login'\nimport { proxy } from './chat.d';\nimport { Main } from './Main';\n\nexport default class App extends Component {\n    state = { showLogin: true };\n\n    componentDidMount() {\n        proxy.addEventListener(\"login\", () => { this.setState({ showLogin: false }) });\n    }\n\n    render() {\n        return (\n            <div className=\"app\">\n                {this.state.showLogin ? <Login /> : <Main />}\n            </div>\n        );\n    }\n\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}